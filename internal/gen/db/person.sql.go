// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: person.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createPerson = `-- name: CreatePerson :one
INSERT INTO people (name)
VALUES ($1)
RETURNING id, name, created_at
`

func (q *Queries) CreatePerson(ctx context.Context, name string) (Person, error) {
	row := q.db.QueryRow(ctx, createPerson, name)
	var i Person
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const deletePerson = `-- name: DeletePerson :exec
DELETE FROM people
WHERE id = $1
`

func (q *Queries) DeletePerson(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deletePerson, id)
	return err
}

const getPerson = `-- name: GetPerson :one
SELECT id, name, created_at
FROM people
WHERE id = $1
`

func (q *Queries) GetPerson(ctx context.Context, id uuid.UUID) (Person, error) {
	row := q.db.QueryRow(ctx, getPerson, id)
	var i Person
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const listPeople = `-- name: ListPeople :many
SELECT id, name, created_at
FROM people
`

func (q *Queries) ListPeople(ctx context.Context) ([]Person, error) {
	rows, err := q.db.Query(ctx, listPeople)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Person{}
	for rows.Next() {
		var i Person
		if err := rows.Scan(&i.ID, &i.Name, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePerson = `-- name: UpdatePerson :exec
UPDATE people
SET name = $2
WHERE id = $1
`

type UpdatePersonParams struct {
	ID   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

func (q *Queries) UpdatePerson(ctx context.Context, arg UpdatePersonParams) error {
	_, err := q.db.Exec(ctx, updatePerson, arg.ID, arg.Name)
	return err
}
